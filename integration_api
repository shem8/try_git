<p align="center">
  <img width="600px" src="https://images.contentful.com/e4m0suk6oqie/4pjQ2ziZpSMswwcgwoKOeY/ea2ea8ada278e37c684886ac34421622/WeWork-Logo_copy.jpg"/>
</p>

# WeWork Services Store Integration API Spec

This document's purpose is to define a protocol for integrating third-party digital services with the upcoming WeWork Services Store.

Our vision is to enable members to enroll to different services from our Store and eventually unify these services' fees with their WeWork monthly invoice.

The following document details the steps required to be implemented by the partner in order to enable integration with the Store.

## Setup

In the setup stage, a few terms will be determined:

- **Product ID (`product-id`)** - This will be used to identify the service to activate. This allows for implementing more than one service on the same endpoint.  
  
  The identifier MUST be comprised of only lowercase letters, without symbols or spaces. (Regular Expression: `/^[a-z]{4,32}$/`)
- **Shared Secret** - Will be used for authentication and verification. This will be generated automatically.
- **Integration URL** - This URL will be accessed when performing integration actions.
- **Permissions (optional)** - Detailed in the following section.
- **SSO URL (optional)** - This URL will be used when a subscribed WeWork member wants to sign into the service through the Store.
- **SSO Salt (optional)** - This is another shared secret that will be used when creating the SSO token. This will be generated automatically.

_HTTPS will be required for production environments._

### Permissions

The partner MAY ask for additional information for the integration, for instance, details of relevant members.

Members will be able, however, to decline giving these permissions and information.

Permissions will be vetted and approved by WeWork.

Permission | Description
---------- | -----------
`user_details` | Details of each user selected for enrollment to the product
`account_details` | Additional details on the account/company enrolling to the product, such as the company name

## Integration Process

The following section details the parts expected to be implemented by the partner in order to comply with this process.

We will use `/wework/enrollments` as the example path.

All request bodies MUST be encoded as JSON and have `Content-Type: application/json` header set.

### Flow

The flow begins when a member enrolls to (or activates) a plan. At that point, an activation request will be sent to the partner, which will allow the service to complete the setup process.

After the partner has completed processing the request and answered with an expected response, the service will be considered activated. The members then can cancel or modify their enrollment and access the service using either Single Sign-On or through some other method provided by the partner.

Then in the end of each billing period (decided by the partners and WeWork)- partners should send a billing request for each WeWork account.

If Single Sign-On was opted out, a URL is expected to be returned with the activation response.

### Authentication

All requests coming from WeWork are MUST authenticate using HTTP basic authentication using the **Product ID** as the username and the **Shared Secret** as the password.

**Example:** https://example.com/wework/enrollments, using `product:password`.

### Signing

All requests coming from WeWork SHALL be signed.  
The signature SHALL be appended as an HTTP header: `WEWORK-Signature`.

The signature will be generated by the following algorithm:

- The request hash's entries will be deep-sorted by keys (meaning nested objects are also to be sorted).
- A string representation will be created by [form-encoding](https://en.wikipedia.org/wiki/Percent-encoding#The_application.2Fx-www-form-urlencoded_type) the resulting sorted hash.
- The string will be signed using HMAC-SHA1 and encoded in Base64.

#### Example:

```ruby
payload = { foo: 1, bar: 2 }

# Sort the payload and encode.
encoded = encode(request) # == "bar=2&foo=1"

# Sign and encode to Base64.
signature = hmacsha1(encoded, shared_secret) # == "S1GnATuRE"
signature = base64(signature) # == "UzFHbkFUdVJF"
```

### Activate integration

<table>
  <tr>
    <th>Request</th>
    <td>
      <code>POST /wework/enrollments</code>
    </td>
  </tr>
  <tr>
    <th>Payload</th>
    <td>
<pre><code>{
  "product": "&lt;product-id&gt;",
  "plan": "&lt;plan-id&gt;",
  "account": "&lt;account-id&gt;",
  "user": {
    "id": "&lt;user-id&gt;",
    "first_name": "&lt;first-name&gt;",
    "last_name": "&lt;last-name&gt;",
    "email": "&lt;email&gt;"
  }
}</code></pre>
    </td>
  </tr>
  <tr>
    <th>Response code</th>
    <td>201 Created</td>
  </tr>
  <tr>
    <th>Response</th>
    <td>
<pre><code>{
  "id": "&lt;generated-id&gt;",
  "url": "&lt;url&gt;"
}</code></pre>
    </td>
  </tr>
</table>

#### Payload reference

<table>
  <tr>
    <th>
      <code>product</code>
    </th>
    <td>The Product ID setup initially</td>
  </tr>
  <tr>
    <th>
      <code>plan</code>
    </th>
    <td>The plan name chosen by the user</td>
  </tr>
  <tr>
    <th>
      <code>account</code>
    </th>
    <td>The WeWork account's identifier</td>
  </tr>
  <tr>
    <th>
      <code>user/id</code>
    </th>
    <td>The WeWork ID of the activating member</td>
  </tr>
  <tr>
    <th>
      <code>user/first_name</code>
    </th>
    <td>First name of the activating member</td>
  </tr>
  <tr>
    <th>
      <code>user/last_name</code>
    </th>
    <td>Last name of the activating member</td>
  </tr>
  <tr>
    <th>
      <code>user/email</code>
    </th>
    <td>E-mail address of activating member</td>
  </tr>
</table>

#### Response reference

<table>
<tr>
  <th>
    <code>id</code>
  </th>
  <td>
    <p>A unique string representing this enrollment. You may generate this in any format, as long as it is unique.</p>
    <p>An enrollment is specific to a product and a plan. However, the users may change their plan.</p>
    <p>This identifier shall also be used later to identify the enrollment when sending billing requests to this user.</p>
    <p>Examples: UUID, random Base64 string, SHA1 of auto-incrementing integer.</p>
  </td>
</tr>
<tr>
  <th>
    <code>url</code>
  </th>
  <td>
    <p>A URL to redirect the member to once the activation is complete.</p>
    <p>This URL must be under the domain specified during setup.</p>
    <p>This field is mandatory if opted-out from Single Sign-On.</p>
  </td>
</tr>
</table>

### Deactivate integration

<table>
  <tr>
    <th>Request</th>
    <td>
      <code>DELETE /wework/enrollments/:id</code>
    </td>
  </tr>
  <tr>
    <th>Payload</th>
    <td>
      <code>{/* empty object */}</code>
    </td>
  </tr>
  <tr>
    <th>Response code</th>
    <td>200 OK</td>
  </tr>
  <tr>
    <th>Response</th>
    <td>
      <code>{/* empty object */}</code>
    </td>
  </tr>
</table>

_204 No Content will also be accepted._

#### URL reference

<table>
  <tr>
    <th>
      <code>:id</code>
    </th>
    <td>The identifier returned by the activation action</td>
  </tr>
</table>

### Modify integration

<table>
  <tr>
    <th>Request</th>
    <td>
      <code>PUT /wework/enrollments/:id</code>
    </td>
  </tr>
  <tr>
    <th>Payload</th>
    <td>
<pre><code>{
  "plan": "&lt;new-plan&gt;"
}</code></pre>
    </td>
  </tr>
  <tr>
    <th>Response code</th>
    <td>200 OK</td>
  </tr>
  <tr>
    <th>Response</th>
    <td>
      <code>{/* empty object */}</code>
    </td>
  </tr>
</table>

_204 No Content will also be accepted._

#### URL reference

<table>
  <tr>
    <th>
      <code>:id</code>
    </th>
    <td>The identifier returned by the activation action</td>
  </tr>
</table>

#### Payload reference

<table>
  <tr>
    <th>
      <code>plan</code>
    </th>
    <td>The plan name chosen by the user</td>
  </tr>
</table>

### Remote Service Changes

Partners MAY allow users to change their plan from within the service.

When a user changes the plan from within the service, the service MUST send a request to the following WeWork URL in a specified format and ensure the WeWork server responded with a 200 OK status to make sure the changes were accepted.

The request SHALL authenticate using HTTP basic authentication using the **Product ID** as the username and the **Shared Secret** as the password.

The request MUST be signed using the **Shared Secret** with the signing algorithm mentioned in the Signing section above.

Once the request is accepted, WeWork will notify the user by e-mail on the change.

#### Modify plan

<table>
  <tr>
    <th>Request</th>
    <td>
      <code>PUT https://store.wework.com/api/v1/enrollments/:id</code>
    </td>
  </tr>
  <tr>
    <th>Payload</th>
    <td>
<pre><code>{
  "plan": "&lt;new-plan&gt;"
}</code></pre>
    </td>
  </tr>
  <tr>
    <th>Response code</th>
    <td>200 OK</td>
  </tr>
  <tr>
    <th>Response</th>
    <td>
      <code>{/* empty object */}</code>
    </td>
  </tr>
</table>

##### URL reference

<table>
  <tr>
    <th>
      <code>:id</code>
    </th>
    <td>The identifier returned by the activation action</td>
  </tr>
</table>

##### Payload reference

<table>
  <tr>
    <th>
      <code>plan</code>
    </th>
    <td>The plan name chosen by the user</td>
  </tr>
</table>

### Invoicing- Billing request API

Partners need to send us a billing summary for specific time range. 

<table>
  <tr>
    <th>Request</th>
    <td>
      <code>POST https://store.wework.com/api/v1/invoicing</code>
    </td>
  </tr>
  <tr>
    <th>Payload</th>
    <td>
      See [payload example](#####example-payload)
    </td>
  </tr>
  <tr>
    <th>Response code</th>
    <td>201 Created</td>
  </tr>
<tr>
    <th>Response</th>
    <td>
<pre><code>{
  "id": "&lt;confiramtion-id&gt;",
}</code></pre>
    </td>
  </tr>
</table>

#### Payload reference

##### Billing requests
<table>
  <tr>
    <th>Name</th><th>Type</th><th>Description</th><th>Mandatory</th>
  </tr>
  <tr>
    <td><code>partnerId</code></td>
    <td>String</td>
    <td>The partner that sending this billing request</td>
    <td>V</td>
  </tr>
  <tr>
    <td><code>billingRequests</code></td>
    <td>BillingRequest[]</td>
    <td>The billing requests for this batch.</td>
    <td>V</td>
  </tr>
</table>

##### Billing request
<table>
  <tr>
    <th>Name</th><th>Type</th><th>Description</th><th>Mandatory</th>
  </tr>
  <tr>
    <td><code>billingRequestId</code></td>
    <td>String</td>
    <td>The identifier for this billing request</td>
    <td>V</td>
  </tr>
  <tr>
    <td><code>description</code></td>
    <td>String</td>
    <td>Human readable description for this request</td>
    <td>V</td>
  </tr>
  <tr>
    <td><code>customer</code></td>
    <td>Account</td>
    <td>The account that this billing will be applied to</td>
    <td>V</td>
  </tr>
  <tr>
    <td><code>totalPaymentDue</code></td>
    <td>PriceSpecification</td>
    <td>The total amount</td>
    <td>V</td>
  </tr>
  <tr>
    <td><code>enrollmentId</code></td>
    <td>String</td>
    <td>The enrollment id that was received from the active integration response.</td>
    <td>V</td>
  </tr>
  <tr>
    <td><code>valueAddedTaxIncluded</code></td>
    <td>Boolean</td>
    <td>Whether the total price include tax (always true)</td>
    <td>V</td>
  </tr>
  <tr>
    <td><code>lineItems</code></td>
    <td>Item[]</td>
    <td>A break down of the ordered item</td>
    <td></td>
  </tr>
  <tr>
    <td><code>billingPeriod</code></td>
    <td>DateRange</td>
    <td>The billing period of this request</td>
    <td></td>
  </tr>
</table>

##### Account
<table>
  <tr>
    <th>Name</th><th>Type</th><th>Description</th><th>Mandatory</th>
  </tr>
  <tr>
    <td><code>customerId</code></td>
    <td>String</td>
    <td>The identifier for this account as received from our systems</td>
    <td>V</td>
  </tr>
  <tr>
    <td><code>email</code></td>
    <td>String</td>
    <td>The email address for this account</td>
    <td></td>
  </tr>
</table>

##### PriceSpecification
<table>
  <tr>
    <th>Name</th><th>Type</th><th>Description</th><th>Mandatory</th>
  </tr>
  <tr>
    <td><code>priceCents</code></td>
    <td>Integer</td>
      <td>The fixed price
        Make sure you're using the right [currency units](https://en.wikipedia.org/wiki/ISO_4217#Treatment_of_minor_currency_units_.28the_.22exponent.22.29), for example 100 US dollars should be used as `priceCents=10000`
      </td>
    <td>V</td>
  </tr>
  <tr>
    <td><code>priceCurrency</code></td>
    <td>String</td>
    <td>The currency in 3-letter [ISO 4217 format](https://en.wikipedia.org/wiki/ISO_4217#Active_codes).</td>
    <td>V</td>
  </tr>
</table>

##### Item
<table>
  <tr>
    <th>Name</th><th>Type</th><th>Description</th><th>Mandatory</th>
  </tr>
  <tr>
    <td><code>description</code></td>
    <td>String</td>
      <td>Human readable description for this item</td>
    <td>V</td>
  </tr>
  <tr>
    <td><code>itemPrice</code></td>
    <td>PriceSpecification</td>
    <td>The price of this line item</td>
    <td>V</td>
  </tr>
  <tr>
    <td><code>orderTime</code></td>
    <td>Time*</td>
      <td>The date this order was recorded</td>
    <td></td>
  </tr>
  <tr>
    <td><code>orderNumber</code></td>
    <td>String</td>
    <td>Identifier for this line item</td>
    <td></td>
  </tr>
</table>

**\* The total amount of all the items price should be equal to totalPaymentDue**

##### DateRange
<table>
  <tr>
    <th>Name</th><th>Type</th><th>Description</th><th>Mandatory</th>
  </tr>
  <tr>
    <td><code>startTime</code></td>
    <td>String</td>
      <td>Human readable description for this item</td>
    <td>V</td>
  </tr>
  <tr>
    <td><code>endTime</code></td>
    <td>Time*</td>
      <td>End Date</td>
    <td>V</td>
  </tr>
</table>

**\* Time is a text field in a [ISO 8601 date and time format](https://en.wikipedia.org/wiki/ISO_8601)(if no time zone defined, we will use UTC time).**

#### Example Payload
```json
{
  "partnerId": "01234567890",
  "billingRequests": [
    {
      "billingRequestId": "01234567890-Jan",
      "billingRequests": [
        {
          "description": "January billing.",
          "enrollmentId": "ABCDEFGH-0123456789",
          "valueAddedTaxIncluded": true,
          "customer": {
            "customerId": "a0edb2a6-b25a-11e6-80f5-76304dec7eb7",
            "email": "jane@doe.com"
          },
          "billingPeriod": {
            "startDate": "2016-12-01T13:07:30+00:00",
            "endDate": "2016-12-30T13:07:30+00:00"
          },
          "totalPaymentDue": {
            "price": 10000,
            "priceCurrency": "USD"
          },
          "lineItems": [
            {
              "description": "furnace",
              "orderDate": "2016-12-10T13:07:30+00:00",
              "orderNumber": "123ABC",
              "itemPrice": {
                "price": 9000,
                "priceCurrency": "USD"
              }
            },
            {
              "description": "furnace installation",
              "orderDate": "2016-12-20T13:07:30+00:00",
              "orderNumber": "123ABD",
              "itemPrice": {
                "price": 1000,
                "priceCurrency": "USD"
              }
            }
          ]
        }
      ]
    }
  ]
}
```


### Error Handling

In case of errors, services are expected to respond with proper HTTP status codes according to the raised error.

Errors related to the client's requests SHOULD to be in the 4xx range, and errors in the service SHOULD be in the 5xx range.

The error response's body SHOULD contain a valid JSON object. If that JSON contains a custom `message` property, that message will be displayed to the user. Otherwise, a generic error message will be displayed.

Redirection status codes in the 3xx range SHALL be ignored.

#### Response example

```json
{
  "id": "&lt;error-id&gt;",
  "error": "&lt;error-code&gt;",
  "message": "Custom error message for the user"
}
```

### Single Sign-On

Implementing Single Sign-On is optional, but recommended.

When members would like to access a product or service through the store, they will be directed to the SSO URL initially set during setup, along with the following parameters:

<table>
  <tr>
    <th>
      <code>enrollment</code>
    </th>
    <td>The ID generated by the partner for the member's enrollment</td>
  </tr>
  <tr>
    <th>
      <code>account</code>
    </th>
    <td>The WeWork account's ID</td>
  </tr>
  <tr>
    <th>
      <code>user</code>
    </th>
    <td>
      <p>The WeWork user's ID.</p>
      <p>This is for cases when multiple users are allowed to use service from the same account.</p>
    </td>
  </tr>
  <tr>
    <th>
      <code>token</code>
    </th>
    <td>An SSO token generated from a signature or hash of the previous parameters signed using the SSO Salt</td>
  </tr>
</table>
  
The token will be generating by hashing the above parameters concatenated to a string, separated by colons:

```
SHA1("<enrollment>:<account>:<user>:<sso-salt>:<timestamp>")
```

The parameters SHOULD be validated by recreating and comparing the token on the receiving end.

#### Example

Given an example SSO Salt of `123456789`, the following URL would be generated:

```
https://example.com/sso?enrollment=123&account=456&user=789&timestamp=1480429351&token=5a12a7cd318fe6e8b0e1cbfa6912a77643140e80
```

### Auditing

All outgoing and incoming requests, including headers and contents shall be logged for auditing and debugging.
